# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zp4J_LTzK2us-pw_4_K2qFPOyCU2I8RN
"""

# STREAMLIT APP - app.py

import streamlit as st
import torch
import torch.nn as nn
import matplotlib.pyplot as plt
import numpy as np

# Define Generator (Same as training)
class Generator(nn.Module):
    def __init__(self, z_dim=20, num_classes=10):
        super().__init__()
        self.label_embedding = nn.Embedding(num_classes, num_classes)
        self.fc = nn.Linear(z_dim + num_classes, 128)

        self.deconv = nn.Sequential(
            nn.Linear(128, 7 * 7 * 64),
            nn.ReLU(True),
            nn.Unflatten(1, (64, 7, 7)),
            nn.ConvTranspose2d(64, 32, 4, stride=2, padding=1),  # 14x14
            nn.ReLU(True),
            nn.ConvTranspose2d(32, 1, 4, stride=2, padding=1),   # 28x28
            nn.Tanh()
        )

    def forward(self, z, labels):
        one_hot = self.label_embedding(labels)
        x = torch.cat([z, one_hot], dim=1)
        x = self.fc(x)
        img = self.deconv(x)
        return img

# Load model
device = torch.device("cpu")
model = Generator()
model.load_state_dict(torch.load("digit_generator.pth", map_location=torch.device('cpu')))
model.eval()


st.title("üñäÔ∏è Handwritten Digit Generator")
digit = st.selectbox("Select a digit to generate (0‚Äì9)", list(range(10)))

if st.button("Generate"):
    z = torch.randn(5, 20)
    labels = torch.full((5,), digit, dtype=torch.long)
    with torch.no_grad():
        gen_imgs = model(z, labels).squeeze().numpy()

    fig, axs = plt.subplots(1, 5, figsize=(10, 2))
    for i in range(5):
        axs[i].imshow(gen_imgs[i], cmap="gray")
        axs[i].axis("off")
    st.pyplot(fig)
